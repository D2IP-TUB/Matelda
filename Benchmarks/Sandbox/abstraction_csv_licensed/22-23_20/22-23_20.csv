ID,Type,Story,Parent,Points,Comments,Author,Title,URL,Content,Created
154368,comment,154190,154363,0,0,kirubakaran,,,"or may be offer both? People who want speed but aren't concerned about privacy can use the current set up. May be this can be a monetization idea too... the more private path = $5 per month ""a small insurance against getting fired""",1207263578
154367,comment,154099,154099,0,0,kirubakaran,,,"<a href=""http://news.ycombinator.com/item?id=153491"" rel=""nofollow"">http://news.ycombinator.com/item?id=153491</a>",1207263302
154366,comment,154190,154347,0,0,ptm,,,"I could do that.<p>I had decided against it earlier due to the potential lag.",1207263026
154365,comment,154262,154273,0,0,kirubakaran,,,"It is amazing how people always diss stuff they haven't even tried.",1207262930
154364,comment,153812,154155,0,0,jimbokun,,,"""Otherwise, the features you mentioned are basically available elsewhere; Visual Basic has closures. C++ has multiple inheritance. Python has multimethods. Ruby has class redefinitions.""<p>Exactly.  Common Lisp is close to a superset of the features of other programming languages.<p>Even in cases where Common Lisp lacks a feature, if it's something that can be expressed by changing syntax, macros can get you pretty close.  I remember a thread on comp.lang.lisp where several people had a go at adding pattern matching to Common Lisp, for example, and were able to get a pretty long way towards that goal in a short amount of time.  Another example: seems like half of the Lisp books out there present an implementation of Prolog in Lisp.",1207262903
154363,comment,154190,154356,0,0,ptm,,,"I could do that.",1207262897
154362,comment,154349,154349,0,0,pius,,,"Lighthouse is actually for issue tracking. The company that makes Lighthouse also makes Warehouse, a similarly elegant system that developers install on their own servers.",1207262889
154361,comment,153812,154158,0,0,LogicHoleFlaw,,,"I will second the suggestion of Lua. Here's my raw beginner's introduction to Lua tables:<p>The basic structure is the hashtable. You can use any first-class value as a key (number, string, function, another table) and similarly any first-class value as a value. Creating a table is done with the table constructor ""{ }"" ('> ' is the repl prompt):<p><pre><code>  > a = { }</code></pre>\nSo now we have an empty table named 'a'. Let's say we wanted to have a table containing a list of colors - this is represented in Lua as a table with ascending integers as the keys. (Starting at 1, rather than 0, which is a bit unconventional)<p><pre><code>  > a = { 'red', 'green', 'blue' }</code></pre>\nThis is equivalent to saying<p><pre><code>  > a = { [1] = 'red', [2] = 'green', [3] = 'blue' }</code></pre>\nIf we use strings as keys, we start seeing some of the syntactical sugar Lua offers. Let's look at favorite foods:<p><pre><code>  faves = { bob = 'pizza', george = 'cake', mary = 'pie' }</code></pre>\nNote that no quotation marks are needed around string keys. (Well, unless the key is a language keyword. That's a bit annoying, but is related to the single-pass compilation, which is valuable. { if = 'can't do it' } fails. { [""if""] = ""can do it"" } succeeds.)<p>We can use numeric indices along with string ones in the same table:<p><pre><code>  mixed = { 'a', 'b', 'c'; state = 'NC', city = 'Charlotte', county = 'Mecklenburg' }</code></pre>\nIf we want to access values from a table, we can use a subscript notation.<p><pre><code>  > print(a[1])\n  red\n  > print(faves['bob'])\n  pizza</code></pre>\nHere's a winner though. If we want to subscript a string, we just use the dot notation.<p><pre><code>  > print(faves.mary)\n  pie</code></pre>\nWhat happens if we subscript a nonexistent entry in a table?<p><pre><code>  > print(faves.james)\n  nil</code></pre>\nNo error is thrown, which is handy. Tables are defined as having the unique value nil as the value for all nonexisting keys. In fact, if you wanted to remove an entry from the table, you just set the key to nil:<p><pre><code>  faves.george = nil -- the cake is a lie! And the key 'george' is removed.</code></pre>\nOne nice thing about Lua tables is that they are extremely regular. There aren't special cases in their behavior. They're easy to construct, inspect, and manipulate. They are the fundamental data type of the language, and everything is done in terms of tables. Objects are created out of tables. Namespaces are tables. Modules are tables. Configuration files are tables. It's an extremely clean and convenient design.<p>In addition to the tables, you get first-class functions:<p><pre><code>  > function a() print 'hello' end\n  > a()\n  hello</code></pre>\nIs <i>syntax sugar</i> for:<p><pre><code>  > a = function() print 'hello' end\n  > a()\n  hello</code></pre>\nThese syntax sweeteners we've seen work together, too:<p><pre><code>  > function a.foo() print 'world' end\n  > print(a[""foo""])\n  function: 0x807f2e8\n  > a.foo()\n  world</code></pre>\nOk, we're almost to objects. The next sugar we see is the ':' notation.<p><pre><code>  > a = { color = blue }\n  > function a:fave_color()\n  >   print('My favorite color is ' .. self.color) -- .. is concatenation\n  > end</code></pre>\nIf a function is defined with the ':' notation then it has an implicit local value called 'self' which is set to the containing table.<p><pre><code>  > a:fave_color()\n  My favorite color is blue</code></pre>\nAt this point it's pretty easy to create simple prototype-based objects.<p>What brings even more power to the table is that we can define custom behavior on each one. We can set a 'metatable' which defines how the table responds to subscripting, the various mathematical operators, and being called in the functional position. In a quick script I worked on I implemented a prototype-based class system in under 20 lines of code, all with the power of metatables.\nLua tables are very powerful and though similar to the ones in Javascript are even cleaner and more pleasant to work with.<p>Anyway, it's all nifty stuff. Other features you get: fast incremental garbage collection, first-class functions, asymmetric coroutines (isomorphic to one-shot continuations), lexical scoping, closures. Lua is also one of the fastest interpreted languages and has an excellent API for binding to C if you want to do something performance sensitive, or want to use a library written in C. The language itself is written in 100% pure ANSI C. It runs on everything from embedded microprocessors to mainframes, in lego robots and on space satellites. And the community is very friendly.<p>If you want macros, there are several community-run variants of the language with macro facilities... I haven't gotten very deep into those though.<p>Good documentation for getting started:<p><pre><code>  http://www.lua.org             -- official lua home page\n  http://www.lua-users.org       -- lua community wiki\n  http://www.lua.org/docs.html   -- lua documentation\n  http://www.lua.org/manual/5.1/ -- lua language reference\n  http://www.tecgraf.puc-rio.br/~lhf/ftp/doc/hopl.pdf -- a fascinating article on the history and features of lua\n</code></pre>\nCheck Lua out and see how you like it. I find it to be a very pleasant language which is fun to work in.",1207262813
154360,comment,154262,154262,0,0,mhartl,,,"I love distributed version control: before Git I used darcs extensively.  Darcs is really nice, and was developed by one of my high school classmates (a fellow physicist), but it seemed that its bugs and performance problems would go perpetually unfixed.  I started to look for a replacement.<p>Git was the leading contender.  Yes, Git rocks, but there's more to it than that.  When your SCM of choice also hosts the Linux kernel (and, indeed, was developed for that very purpose), you know it will never be abandoned.  No serious bug can last for long. That risk mitigation is worth a lot, and it's one of Git's biggest strengths.<p>I realized about three months ago that Git was going to win.  I'm not sure what tipped it, but it made me happy: partially because I felt proud to have figured it out, but mostly because it meant I could stop agonizing about which SCM to use.<p>Viva Git!",1207262738
154359,comment,153812,154320,0,0,stevecooperorg,,,"I did, and I didn't.<p>The ""I did"": It seems very sensible to use s-expressions for everything. That lispy syntax meant that I started seeing ways to encode almost everything as lisp. I even started keeping a todo list in s-expressions;<p>(do \n    (buy bread)\n    (tidy (kitchen living-room bathroom))\n    (get life))<p>The classic XKCD cartoon had it perfectly: ""I felt a great enlightment. I saw the naked structure of Lisp code unfold before me. The patterns and metapatterns danced. Syntax faded""<p>I didn't: when it came to actual common lisp, cracks started to appear. The crazy mini-language for looping. The arbitrary-sounding names. The feeling that, if I ever wanted to do anything remotely windows-specific I would face years of horror.<p>I've blooged about it more at <a href=""http://www.stevecooper.org/2008/02/13/impractical-uncommon-lisp/"" rel=""nofollow"">http://www.stevecooper.org/2008/02/13/impractical-uncommon-l...</a>, if you've got too much free time. ;)",1207262575
154358,comment,153812,154327,0,0,gruseom,,,"As far as I can tell, you're talking about your experience of what's easier and harder. Your experience is not ""the brain"".<p>Certainly if you're habituated to the object-model style of programming, other forms of abstraction may seem weird. The irony here is that twenty years ago, the people making your kind of argument were directing it <i>all</i> against objects.<p>As a side note, treating programming objects as if they were physical objects works as long as there's a good fit between the two. As soon as you need the objects to behave in ways that physical objects don't (and believe me, in any complex OO system, you will), you find yourself tied up in knots that it will take a <i>lot</i> of thinking to extricate yourself from. (Speaking of complexity that isn't intrinsic to the problem...) Not accidentally, the tools that people reach for then tend to be ersatz versions of metaprogramming (reflection, code generation), and Greenspun is off to the races...",1207262542
154357,comment,154064,154064,0,0,aschobel,,,"Google Guice, it's the bee's knees:<p><a href=""http://code.google.com/p/google-guice/"" rel=""nofollow"">http://code.google.com/p/google-guice/</a>",1207262500
154356,comment,154190,154319,0,0,kirubakaran,,,"Instead of rewriting the links, can you asynchronously (without holding up the browser) check all the external links after the page loads and mark all the nsfw links in red or something like that? This way, privacy concerns can be addressed to a certain extent (if you can also don't store the current url that I am on).<p>[edit:oops, just noticed that Husafan comment says pretty much the same thing.]",1207262444
154355,comment,153955,154346,0,0,gruseom,,,"You seem to have missed my point. I'm not saying a technical solution is hard to <i>describe</i>. I'm saying it's hard to <i>implement</i> - perhaps much harder than it seems. You'd have to do it for all Lisps on all OS's. As your own post indicates rather clearly, getting it to work with <i>one</i> Lisp on <i>one</i> OS isn't enough.<p>As for how to ensure that one thing is harder to find on the internet than another, I suppose we can leave that as an exercise to the reader.",1207262433
154354,comment,45698,45698,0,0,aaaaaaa4,,,"This essay was great it really gave me an insight to a programmers mind and actions!!!!",1207262322
154353,story,,,2,0,ivankirigin,"China's Instant Cities",http://ngm.nationalgeographic.com/ngm/0706/feature4/index.html,,1207262267
154352,comment,154190,154313,0,0,marrone,,,"Traversing the entire DOM on page load and rewriting all links for large pages would also slow down the page though.<p>Also rewriting links seems too intrusive for my tastes and means I cant ""Copy link location"" which I frequently do. I like the idea, but I personally would have just used a single ""click"" event handler on the entire page using the capturing phase and hijack links to redirect through your site first, rather than doing a rewrite for every link in the dom",1207262115
154351,comment,153883,154193,0,0,asdflkj,,,"If nothing on the page I linked seems suspect to you, I don't think anything I say will help, either. And this isn't the place to talk about politics, anyway. I just thought many fans of The Economist here would be shocked to see that a writer they trust also writes that in his spare time.",1207262108
154350,comment,153955,154208,0,0,elq,,,"hrm. I do all of my real work on linux and am writing this comment on my linux workstation - so I'm far from a linux basher.<p>But, getting fonts that don't suck ass takes a lot of dingy work on linux (fedora, ubuntu, arch, you name it - in my humble experience). And even after that work, the fonts are still ugly compared to either windows or osx.<p>And personally (being an old bsd guy), I find macports makes far more sense than yum (what a pile of crap), apt isn't so bad, but I still prefer a port tree.",1207261857
154349,story,,,7,19,pibefision,"Ask YC: Hosting your source code outside, it's really secure?",,"I'm seeing a lot of people who host code outside. Maybe to get aditional functionalty or as a backup solution.<p>If you are a small startup, and your code is your life, because u worked so hard on it, its really a good idea host it outside? Using Lighthouse App, or any other service?",1207261712
154348,comment,154129,154252,0,0,davidw,,,"Right.  There are some network effects in this market, but they're not <i>that</i> strong.  Offer more money, and people will jump.  It's not like the MS Office market where people have to be dragged kicking and screaming to a free alternative.",1207261625
154347,comment,154190,154313,0,0,Husafan,,,"Gotcha.  Well maybe you could do this asynchronously, after page load?  Once the page is done loading, extension fires off for info about links on the page?  Assuming this didn't take to long, it might be doable before they clicked a new link.<p>Also, extensions have access to cookies per domain?  Maybe the extension could use this to cache results for a given page client-side?",1207261505
154346,comment,153955,154342,0,0,daniel-cussen,,,"<i>There are enough kind and intelligent people in the Lisp world who like to help others learn, and this problem is complained about so widely and loudly, that if a technical solution were possible I think we'd have it already.</i><p>A technical solution would be 1) click to download, 2) unzip, and 3) drag to applications folder.  On top of that, the lisp that does this should be easier to find, and lisps that are more difficult to deal with should be harder to find, lest a noob tries to install them.",1207261475
154345,comment,153856,153856,0,0,LPTS,,,"Nice beta.  Nice functionality.  I could see using this while I work at my desk.  I will bookmark it.<p>I always find the most value in detailed critical feedback.  In that spirit:<p>There is a lot of subtle visual dissonance on your website.  It looks like you put some effort into the design, but it fails because of small details.  It's a shame to have a promising functionality masked with so much ugly.<p>The blue yellow and pink text is ugly.  It draws the eye away from your app.  It's hard for me to switch between reading text of different colors.  When I look at those bright colors, your app and the light green text just fades into the background.  I think the green and orange are nice cool colors.  Stick with cool colors like that.  Subtle is better.<p>Do you want round corners or square corners?  I think you should round them all to soften the page.  You are locked into squares for the album covers, but all square is too aggressive, so you should make the rounding more subtle.  You have giant rounding that is dissonant with os x and album cavers and half the site.  Use tiny little rounding so it blends with the OS X apps and the square corners on the album cover.  Again, subtle.  I shouldn't notice corners, here I do.<p>Your growl clone belongs top right of window, not bottom right.<p>It shouldn't beep and say stupid things.  We are listening to music and beeps suck if you are listening.  They are not 'fun' just superfluous.  Assume your audience is more intelligent then the mtv crowd.  Real listening requires focused attention and the beeps are insulting to the music of the artists you host.  It's not consistent with the goal of allowing people to discover awesome songs, because a lot of awesome songs require careful listening.  Listening to a great song with those interruptions is like looking at a van gogh with kids stickers on it.  Let your artists control 100% of the audio experience from your site.  Slightly shaking the growl would be an acceptable alternative.<p>Incidentally, I heard many really kick ass songs.<p>My impression of the site is positive.  The engine is good, it's functionality is good, it's design was overall good, but details were weak despite honest effort, and it's music is good.  Hire a geek with a minimalist aesthetic to fix your designs small details.<p>I'm looking forward to an iPhone app of this.<p>Aside from this starting a business stuff, I'm a musician, and I would love for a site like this to replace MySpace as the default for musicians.",1207261305
154344,comment,154235,154235,0,0,mattculbreth,,,"Not sure I understand your question here.  Who is the intended user or audience of the metrics?",1207261250
154343,comment,153955,154317,0,0,daniel-cussen,,,"Tell me about it.  Despite all the flack XP gets/deserves, this one time, it just worked.  Apple and Linux just didn't work.",1207261235
154342,comment,153955,153955,0,0,gruseom,,,"The Lisp world is fragmented. It's not just all the different Lisps, it's all the different <Lisp,OS> pairs (or even <Lisp,OS,editor> triples). They all behave differently. There's also randomness involved: I bet there are others out there complaining that they couldn't get Clisp running with Slime on Windows XP.<p>I doubt this will change. The Lisp universe has always been decentralized (which has been one of the secrets of its innovativeness). Its culture tends to be individualistic, which makes things more, not less fragmentary. And there's still another point - once you do get things working, they work so well that you forget about the initial pain. So the world divides into people who remember nothing but the pain (because they never broke through the threshold) and people who remember nothing about it (because they're too busy loving the other side).<p>The good news is that once you do get things running you will approximately never have that problem again. The differences, at least in the Common Lisp case, are greatest at the noob stage and cause comparatively little trouble later on. I realize this is no consolation to the noob.<p>There are enough kind and intelligent people in the Lisp world who like to help others learn, and this problem is complained about so widely and loudly, that if a technical solution were possible I think we'd have it already. Maybe in the absence of that, we need to do a better job of telling the story of why Lisp is the way it is, and of helping people get through that initial stage... maybe a social network to pair Lisp noobs with expert buddies :)<p>But even this would run up against the cowboy culture. I don't mean cowboy as in ""cowboy coding"". I mean the old west, do-it-yourself value system. In my imagination at least, old cowboys would help noob cowboys, but they wouldn't coddle them. They'd make sure you didn't get killed, but they sure as heck wouldn't make sure you didn't get hurt... they'd think it was good for you.",1207261163
154341,story,,,1,0,mattculbreth,"Sources of Seed Funding",http://www.peachseedz.com/peachseedz/2008/04/sources-of-seed.html,,1207261140
154340,comment,153908,154216,0,0,caudicus,,,"Hmmm...I'm not sure if I buy that statement...is there strong correlation between income and debt levels? Any data to back up that statement? I mean basic financial advice is that everyone should maintain a health ""debt to income"" ratio - so according to that, debt should increase with income. That's theory...I searched for a graph of income vs net worth, but couldn't find one.<p>Most low income working people I know avoid debt like the plague - with the exception of car loans and house loans, which low and middle income people pretty much approach the same way, but just purchasing at varying price levels.<p>Just to be clear, I'm comparing low and middle income families. That said, low income people do spend a larger percentage of their money on food and energy as compared to middle income families (since everyone needs to feed themselves, keep themselves warm and go places).<p>I think students would be the only exception to this...but I'd guess they're an exception, as they are taking out debt because they know their future earnings are going to go up in the long run.<p>Edit: However I do see what you're saying in terms of upper income people losing money tied to investments due to inflation. But I'm just saying, all else equal, for a zero-debt lower income household vs a zero-debt middle income household (of which there exist many), the lower one is going to get hit hard by this.",1207261083
154339,comment,154190,154190,0,0,andr,,,"Is that really an issue? I've stumbled across NSFW sites when I had day jobs and nobody minded. People actually found it kinda funny.",1207261042
154338,comment,153999,153999,0,0,sah,,,"I was disappointed to read that Scalr requires its own machine images.  I'd prefer a generic component that I could hook up to my own existing images.  (Which aren't even web servers...)",1207261040
154337,comment,154293,154293,0,0,davidw,,,!HN,1207260636
154336,comment,153491,153768,0,0,hollerith,,,"I, too, am very sceptical of the second claim (about training your willpower).  I have pushed myself as far as I can over long periods of time without noticing any increase in the size of my willpower muscle.",1207260516
154335,comment,154315,154315,0,0,baha_man,,,"Does anyone here have a single example of a performance problem caused by using a 'dynamic' language rather than a 'static' language?  The only performance problems I've ever encountered 'in the wild' have been down to things like database access, I/O, bad sorting algorithms, string concatenation, etc.",1207260508
154334,comment,153955,153955,0,0,pslamnp,,,"You might try ReadyLisp for Mac OS at <a href=""http://www.newartisans.com/software/readylisp.html"" rel=""nofollow"">http://www.newartisans.com/software/readylisp.html</a>.<p>It uses Aquamacs, SBCL and SLIME.  Just drop the icon in the applications folder.",1207260471
154333,comment,154314,154314,0,0,pchristensen,,,"If you use a common language (PHP, Perl, possibly Ruby on Rails), you can get a crappy shared host for cheap (I have 1 yr of TextDrive for $100).  This will let you host a web app (or several) and let you put a toe in the water.  If one of the apps gets some traction, it's easy to move to beefier hardware later.<p>That's all you need from a money perspective.  After that all you need to do is invest lots of <i>time</i> and <i>programming effort</i>.  No price tag but a significant cost :)",1207260454
